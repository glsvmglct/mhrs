!function (t) { var o, e, n, i, d, s = (e = [], n = !1, i = function (t) { clearTimeout(o), o = setTimeout(d, 100) }, d = function () { for (var t = 0, o = e.length; t < o; t++) e[t].apply() }, { register: function (o) { e.push(o), !1 === n && (t(window).bind("resize", i), n = !0) }, unregister: function (t) { for (var o = 0, n = e.length; o < n; o++) if (e[o] == t) { delete e[o]; break } } }), r = function (o, e) { this.element = t(o), this.dropdown = t('<li class="dropdown hide pull-right tabdrop"><a class="dropdown-toggle" data-toggle="dropdown" href="#">' + e.text + ' <b class="caret"></b></a><ul class="dropdown-menu"></ul></li>').prependTo(this.element), this.element.parent().is(".tabs-below") && this.dropdown.addClass("dropup"), s.register(t.proxy(this.layout, this)), this.layout() }; r.prototype = { constructor: r, layout: function () { var o = []; this.dropdown.removeClass("hide"), this.element.append(this.dropdown.find("li")).find(">li").not(".tabdrop").each(function () { this.offsetTop > 0 && o.push(this) }), o.length > 0 ? (o = t(o), this.dropdown.find("ul").empty().append(o), 1 == this.dropdown.find(".active").length ? this.dropdown.addClass("active") : this.dropdown.removeClass("active")) : this.dropdown.addClass("hide") } }, t.fn.tabdrop = function (o) { return this.each(function () { var e = t(this), n = e.data("tabdrop"), i = "object" == typeof o && o; n || e.data("tabdrop", n = new r(this, t.extend({}, t.fn.tabdrop.defaults, i))), "string" == typeof o && n[o]() }) }, t.fn.tabdrop.defaults = { text: '<i class="icon-align-justify"></i>' }, t.fn.tabdrop.Constructor = r }(window.jQuery);