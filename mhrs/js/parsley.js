var _slice = Array.prototype.slice; function _toConsumableArray(e) { if (Array.isArray(e)) { for (var t = 0, i = Array(e.length) ; t < e.length; t++) i[t] = e[t]; return i } return Array.from(e) } !function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t(require("jquery")) : "function" == typeof define && define.amd ? define(["jquery"], t) : e.parsley = t(e.jQuery) }(this, function (e) { "use strict"; var t, i = 1, r = {}, s = { attr: function (e, t, i) { var r, s, n, a = new RegExp("^" + t, "i"); if (void 0 === i) i = {}; else for (r in i) i.hasOwnProperty(r) && delete i[r]; if (void 0 === e || void 0 === e[0]) return i; for (r = (n = e[0].attributes).length; r--;) (s = n[r]) && s.specified && a.test(s.name) && (i[this.camelize(s.name.slice(t.length))] = this.deserializeValue(s.value)); return i }, checkAttr: function (e, t, i) { return e.is("[" + t + i + "]") }, setAttr: function (e, t, i, r) { e[0].setAttribute(this.dasherize(t + i), String(r)) }, generateID: function () { return "" + i++ }, deserializeValue: function (t) { var i; try { return t ? "true" == t || "false" != t && ("null" == t ? null : isNaN(i = Number(t)) ? /^[\[\{]/.test(t) ? e.parseJSON(t) : t : i) : t } catch (e) { return t } }, camelize: function (e) { return e.replace(/-+(.)?/g, function (e, t) { return t ? t.toUpperCase() : "" }) }, dasherize: function (e) { return e.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase() }, warn: function () { var e; window.console && "function" == typeof window.console.warn && (e = window.console).warn.apply(e, arguments) }, warnOnce: function (e) { r[e] || (r[e] = !0, this.warn.apply(this, arguments)) }, _resetWarnings: function () { r = {} }, trimString: function (e) { return e.replace(/^\s+|\s+$/g, "") }, namespaceEvents: function (t, i) { return (t = this.trimString(t || "").split(/\s+/))[0] ? e.map(t, function (e) { return e + "." + i }).join(" ") : "" }, difference: function (t, i) { var r = []; return e.each(t, function (e, t) { -1 == i.indexOf(t) && r.push(t) }), r }, all: function (t) { return e.when.apply(e, _toConsumableArray(t).concat([42, 42])) }, objectCreate: Object.create || (t = function () { }, function (e) { if (arguments.length > 1) throw Error("Second argument not supported"); if ("object" != typeof e) throw TypeError("Argument must be an object"); t.prototype = e; var i = new t; return t.prototype = null, i }) }, n = { namespace: "data-parsley-", inputs: "input, textarea, select", excluded: "input[type=button], input[type=submit], input[type=reset], input[type=hidden]", priorityEnabled: !0, multiple: null, group: null, uiEnabled: !0, validationThreshold: 3, focus: "first", trigger: !1, triggerAfterFailure: "input", errorClass: "", successClass: "", classHandler: function (e) { }, errorsContainer: function (e) { } }, a = function () { this.__id__ = s.generateID() }; a.prototype = { asyncSupport: !0, _pipeAccordingToValidationResult: function () { var t = this, i = function () { var i = e.Deferred(); return !0 !== t.validationResult && i.reject(), i.resolve().promise() }; return [i, i] }, actualizeOptions: function () { return s.attr(this.$element, this.options.namespace, this.domOptions), this.parent && this.parent.actualizeOptions && this.parent.actualizeOptions(), this }, _resetOptions: function (e) { this.domOptions = s.objectCreate(this.parent.options), this.options = s.objectCreate(this.domOptions); for (var t in e) e.hasOwnProperty(t) && (this.options[t] = e[t]); this.actualizeOptions() }, _listeners: null, on: function (e, t) { return this._listeners = this._listeners || {}, (this._listeners[e] = this._listeners[e] || []).push(t), this }, subscribe: function (t, i) { e.listenTo(this, t.toLowerCase(), i) }, off: function (e, t) { var i = this._listeners && this._listeners[e]; if (i) if (t) for (var r = i.length; r--;) i[r] === t && i.splice(r, 1); else delete this._listeners[e]; return this }, unsubscribe: function (t, i) { e.unsubscribeTo(this, t.toLowerCase()) }, trigger: function (e, t, i) { t = t || this; var r, s = this._listeners && this._listeners[e]; if (s) for (var n = s.length; n--;) if (!1 === (r = s[n].call(t, t, i))) return r; return !this.parent || this.parent.trigger(e, t, i) }, reset: function () { if ("ParsleyForm" !== this.__class__) return this._resetUI(), this._ui.$errorClassHandler.parent().removeClass("FormValidateSuccess").removeClass("FormValidateError").removeClass("has-error").removeClass("has-success"), this._ui.$errorClassHandler.parent().find(".fa").removeClass("fa-check").removeClass("fa-warning").fadeOut("slow"), e(".FormValidateError .tooltips").tooltip("hide"), this._trigger("reset"); for (var t = 0; t < this.fields.length; t++) this.fields[t].reset(); this._trigger("reset"), this._ui.$errorClassHandler.parent().removeClass("FormValidateSuccess").removeClass("FormValidateError").removeClass("has-error").removeClass("has-success"), this._ui.$errorClassHandler.parent().find(".fa").removeClass("fa-check").removeClass("fa-warning").fadeOut("slow"), e(".FormValidateError .tooltips").tooltip("hide") }, destroy: function () { if (this._destroyUI(), "ParsleyForm" !== this.__class__) return this.$element.removeData("Parsley"), this.$element.removeData("ParsleyFieldMultiple"), this._ui.$errorClassHandler.parent().removeClass("FormValidateSuccess").removeClass("FormValidateError").removeClass("has-error").removeClass("has-success"), this._ui.$errorClassHandler.parent().find(".fa").removeClass("fa-check").removeClass("fa-warning").fadeOut("slow"), e(".FormValidateError .tooltips").tooltip("hide"), void this._trigger("destroy"); for (var t = 0; t < this.fields.length; t++) this.fields[t].destroy(); this.$element.removeData("Parsley"), this._trigger("destroy"), this._ui.$errorClassHandler.parent().removeClass("FormValidateSuccess").removeClass("FormValidateError").removeClass("has-error").removeClass("has-success"), this._ui.$errorClassHandler.parent().find(".fa").removeClass("fa-check").removeClass("fa-warning").fadeOut("slow"), e(".FormValidateError .tooltips").tooltip("hide") }, asyncIsValid: function (e, t) { return s.warnOnce("asyncIsValid is deprecated; please use whenValid instead"), this.whenValid({ group: e, force: t }) }, _findRelated: function () { return this.options.multiple ? this.parent.$element.find("[" + this.options.namespace + 'multiple="' + this.options.multiple + '"]') : this.$element } }; var o = { string: function (e) { return e }, integer: function (e) { if (isNaN(e)) throw 'Requirement is not an integer: "' + e + '"'; return parseInt(e, 10) }, number: function (e) { if (isNaN(e)) throw 'Requirement is not a number: "' + e + '"'; return parseFloat(e) }, reference: function (t) { var i = e(t); if (0 === i.length) throw 'No such reference: "' + t + '"'; return i }, boolean: function (e) { return "false" !== e }, object: function (e) { return s.deserializeValue(e) }, regexp: function (e) { var t = ""; return /^\/.*\/(?:[gimy]*)$/.test(e) ? (t = e.replace(/.*\/([gimy]*)$/, "$1"), e = e.replace(new RegExp("^/(.*?)/" + t + "$"), "$1")) : e = "^" + e + "$", new RegExp(e, t) } }, l = function (e, t) { var i = o[e || "string"]; if (!i) throw 'Unknown requirement specification: "' + e + '"'; return i(t) }, u = function (t) { e.extend(!0, this, t) }; u.prototype = { validate: function (t, i) { if (this.fn) return arguments.length > 3 && (i = [].slice.call(arguments, 1, -1)), this.fn.call(this, t, i); if (e.isArray(t)) { if (!this.validateMultiple) throw "Validator `" + this.name + "` does not handle multiple values"; return this.validateMultiple.apply(this, arguments) } if (this.validateNumber) return !isNaN(t) && (arguments[0] = parseFloat(arguments[0]), this.validateNumber.apply(this, arguments)); if (this.validateString) return this.validateString.apply(this, arguments); throw "Validator `" + this.name + "` only handles multiple values" }, parseRequirements: function (t, i) { if ("string" != typeof t) return e.isArray(t) ? t : [t]; var r = this.requirementType; if (e.isArray(r)) { for (var n = function (e, t) { var i = e.match(/^\s*\[(.*)\]\s*$/); if (!i) throw 'Requirement is not an array: "' + e + '"'; var r = i[1].split(",").map(s.trimString); if (r.length !== t) throw "Requirement has " + r.length + " values when " + t + " are needed"; return r }(t, r.length), a = 0; a < n.length; a++) n[a] = l(r[a], n[a]); return n } return e.isPlainObject(r) ? function (e, t, i) { var r = null, s = {}; for (var n in e) if (n) { var a = i(n); "string" == typeof a && (a = l(e[n], a)), s[n] = a } else r = l(e[n], t); return [r, s] }(r, t, i) : [l(r, t)] }, requirementType: "string", priority: 2 }; var d = function (e, t) { this.__class__ = "ParsleyValidatorRegistry", this.locale = "en", this.init(e || {}, t || {}) }, h = { email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i, number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i, integer: /^-?\d+$/, digits: /^\d+$/, alphanum: /^\w+$/i, url: new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/\\S*)?$", "i") }; h.range = h.number; var p = function (e) { var t = ("" + e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/); return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0 }; d.prototype = { init: function (t, i) { this.catalog = i, this.validators = e.extend({}, this.validators); for (var r in t) this.addValidator(r, t[r].fn, t[r].priority); window.Parsley.trigger("parsley:validator:init") }, setLocale: function (e) { if (void 0 === this.catalog[e]) throw new Error(e + " is not available in the catalog"); return this.locale = e, this }, addCatalog: function (e, t, i) { return "object" == typeof t && (this.catalog[e] = t), !0 === i ? this.setLocale(e) : this }, addMessage: function (e, t, i) { return void 0 === this.catalog[e] && (this.catalog[e] = {}), this.catalog[e][t] = i, this }, addMessages: function (e, t) { for (var i in t) this.addMessage(e, i, t[i]); return this }, addValidator: function (e, t, i) { if (this.validators[e]) s.warn('Validator "' + e + '" is already defined.'); else if (n.hasOwnProperty(e)) return void s.warn('"' + e + '" is a restricted keyword and is not a valid validator name.'); return this._setValidator.apply(this, arguments) }, updateValidator: function (e, t, i) { return this.validators[e] ? this._setValidator.apply(this, arguments) : (s.warn('Validator "' + e + '" is not already defined.'), this.addValidator.apply(this, arguments)) }, removeValidator: function (e) { return this.validators[e] || s.warn('Validator "' + e + '" is not defined.'), delete this.validators[e], this }, _setValidator: function (e, t, i) { "object" != typeof t && (t = { fn: t, priority: i }), t.validate || (t = new u(t)), this.validators[e] = t; for (var r in t.messages || {}) this.addMessage(r, e, t.messages[r]); return this }, getErrorMessage: function (e) { var t; "type" === e.name ? t = (this.catalog[this.locale][e.name] || {})[e.requirements] : t = this.formatMessage(this.catalog[this.locale][e.name], e.requirements); return t || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage }, formatMessage: function (e, t) { if ("object" == typeof t) { for (var i in t) e = this.formatMessage(e, t[i]); return e } return "string" == typeof e ? e.replace(/%s/i, t) : "" }, validators: { notblank: { validateString: function (e) { return /\S/.test(e) }, priority: 2 }, required: { validateMultiple: function (e) { return e.length > 0 }, validateString: function (e) { return /\S/.test(e) }, priority: 512 }, type: { validateString: function (e, t) { var i = arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2], r = i.step, s = void 0 === r ? "1" : r, n = i.base, a = void 0 === n ? 0 : n, o = h[t]; if (!o) throw new Error("validator type `" + t + "` is not supported"); if (!o.test(e)) return !1; if ("number" === t && !/^any$/i.test(s || "")) { var l = Number(e), u = Math.max(p(s), p(a)); if (p(l) > u) return !1; var d = function (e) { return Math.round(e * Math.pow(10, u)) }; if ((d(l) - d(a)) % d(s) != 0) return !1 } return !0 }, requirementType: { "": "string", step: "string", base: "number" }, priority: 256 }, pattern: { validateString: function (e, t) { return t.test(e) }, requirementType: "regexp", priority: 64 }, minlength: { validateString: function (e, t) { return e.length >= t }, requirementType: "integer", priority: 30 }, maxlength: { validateString: function (e, t) { return e.length <= t }, requirementType: "integer", priority: 30 }, length: { validateString: function (e, t, i) { return e.length >= t && e.length <= i }, requirementType: ["integer", "integer"], priority: 30 }, mincheck: { validateMultiple: function (e, t) { return e.length >= t }, requirementType: "integer", priority: 30 }, maxcheck: { validateMultiple: function (e, t) { return e.length <= t }, requirementType: "integer", priority: 30 }, check: { validateMultiple: function (e, t, i) { return e.length >= t && e.length <= i }, requirementType: ["integer", "integer"], priority: 30 }, min: { validateNumber: function (e, t) { return e >= t }, requirementType: "number", priority: 30 }, max: { validateNumber: function (e, t) { return e <= t }, requirementType: "number", priority: 30 }, range: { validateNumber: function (e, t, i) { return e >= t && e <= i }, requirementType: ["number", "number"], priority: 30 }, equalto: { validateString: function (t, i) { var r = e(i); return r.length ? t === r.val() : t === i }, priority: 256 } } }; var c = {}; c.Form = { _actualizeTriggers: function () { var e = this; this.$element.on("submit.Parsley", function (t) { e.onSubmitValidate(t) }), this.$element.on("click.Parsley", 'input[type="submit"], button[type="submit"]', function (t) { e.onSubmitButton(t) }), !1 !== this.options.uiEnabled && this.$element.attr("novalidate", "") }, focus: function () { if (this._focusedField = null, !0 === this.validationResult || "none" === this.options.focus) return null; for (var e = 0; e < this.fields.length; e++) { var t = this.fields[e]; if (!0 !== t.validationResult && t.validationResult.length > 0 && void 0 === t.options.noFocus && (this._focusedField = t.$element, "first" === this.options.focus)) break } return null === this._focusedField ? null : this._focusedField.focus() }, _destroyUI: function () { this.$element.off(".Parsley") } }, c.Field = { _reflowUI: function () { if (this._buildUI(), this._ui) { var e = function e(t, i, r) { for (var s = [], n = [], a = 0; a < t.length; a++) { for (var o = !1, l = 0; l < i.length; l++) if (t[a].assert.name === i[l].assert.name) { o = !0; break } o ? n.push(t[a]) : s.push(t[a]) } return { kept: n, added: s, removed: r ? [] : e(i, t, !0).added } }(this.validationResult, this._ui.lastValidationResult); this._ui.lastValidationResult = this.validationResult, this._manageStatusClass(), this._manageErrorsMessages(e), this._actualizeTriggers(), !e.kept.length && !e.added.length || this._failedOnce || (this._failedOnce = !0, this._actualizeTriggers()) } }, getErrorsMessages: function () { if (!0 === this.validationResult) return []; for (var e = [], t = 0; t < this.validationResult.length; t++) e.push(this.validationResult[t].errorMessage || this._getErrorMessage(this.validationResult[t].assert)); return e }, addError: function (e) { var t = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], i = t.message, r = t.assert, s = t.updateClass, n = void 0 === s || s; this._buildUI(), this._addError(e, { message: i, assert: r }), n && this._errorClass() }, updateError: function (e) { var t = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], i = t.message, r = t.assert, s = t.updateClass, n = void 0 === s || s; this._buildUI(), this._updateError(e, { message: i, assert: r }), n && this._errorClass() }, removeError: function (e) { var t = (arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1]).updateClass, i = void 0 === t || t; this._buildUI(), this._removeError(e), i && this._manageStatusClass() }, _manageStatusClass: function () { this.hasConstraints() && this.needsValidation() && !0 === this.validationResult ? this._successClass() : this.validationResult.length > 0 ? this._errorClass() : this._resetClass() }, _manageErrorsMessages: function (t) { if (void 0 === this.options.errorsMessagesDisabled) { if (void 0 !== this.options.errorMessage) return t.added.length || t.kept.length ? (this._insertErrorWrapper(), 0 === this._ui.$errorsWrapper.find(".parsley-custom-error-message").length && this._ui.$errorsWrapper.append(e(this.options.errorTemplate).addClass("parsley-custom-error-message")), this._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(this.options.errorMessage)) : this._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove(); for (var i = 0; i < t.removed.length; i++) this._removeError(t.removed[i].assert.name); for (i = 0; i < t.added.length; i++) this._addError(t.added[i].assert.name, { message: t.added[i].errorMessage, assert: t.added[i].assert }); for (i = 0; i < t.kept.length; i++) this._updateError(t.kept[i].assert.name, { message: t.kept[i].errorMessage, assert: t.kept[i].assert }) } }, _addError: function (t, i) { var r = i.message, s = i.assert; this._insertErrorWrapper(), this._ui.$errorsWrapper.addClass("filled").append(e(this.options.errorTemplate).addClass("parsley-" + t).html(r || this._getErrorMessage(s))) }, _updateError: function (e, t) { var i = t.message, r = t.assert; this._ui.$errorsWrapper.addClass("filled").find(".parsley-" + e).html(i || this._getErrorMessage(r)) }, _removeError: function (e) { this._ui.$errorsWrapper.removeClass("filled").find(".parsley-" + e).remove() }, _getErrorMessage: function (e) { var t = e.name + "Message"; return void 0 !== this.options[t] ? window.Parsley.formatMessage(this.options[t], e.requirements) : window.Parsley.getErrorMessage(e) }, _buildUI: function () { if (!this._ui && !1 !== this.options.uiEnabled) { var t = {}; this.$element.attr(this.options.namespace + "id", this.__id__), t.$errorClassHandler = this._manageClassHandler(), t.errorsWrapperId = "parsley-id-" + (this.options.multiple ? "multiple-" + this.options.multiple : this.__id__), t.$errorsWrapper = e(this.options.errorsWrapper).attr("id", t.errorsWrapperId), t.lastValidationResult = [], t.validationInformationVisible = !1, this._ui = t } }, _manageClassHandler: function () { if ("string" == typeof this.options.classHandler && e(this.options.classHandler).length) return e(this.options.classHandler); var t = this.options.classHandler.call(this, this); return void 0 !== t && t.length ? t : !this.options.multiple || this.$element.is("select") ? this.$element : this.$element.parent() }, _insertErrorWrapper: function () { var t; if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent(); if ("string" == typeof this.options.errorsContainer) { if (e(this.options.errorsContainer).length) return e(this.options.errorsContainer).append(this._ui.$errorsWrapper); s.warn("The errors container `" + this.options.errorsContainer + "` does not exist in DOM") } else "function" == typeof this.options.errorsContainer && (t = this.options.errorsContainer.call(this, this)); if (void 0 !== t && t.length) return t.append(this._ui.$errorsWrapper); var i = this.$element; return this.options.multiple && (i = i.parent()), i.after(this._ui.$errorsWrapper) }, _actualizeTriggers: function () { var e, t = this, i = this._findRelated(); i.off(".Parsley"), this._failedOnce ? i.on(s.namespaceEvents(this.options.triggerAfterFailure, "Parsley"), function () { t.validate() }) : (e = s.namespaceEvents(this.options.trigger, "Parsley")) && i.on(e, function (e) { t._eventValidate(e) }) }, _eventValidate: function (e) { !(!/key|input/.test(e.type) || this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold || this.validate() }, _resetUI: function () { this._failedOnce = !1, this._actualizeTriggers(), void 0 !== this._ui && (this._ui.$errorsWrapper.removeClass("filled").children().remove(), this._resetClass(), this._ui.lastValidationResult = [], this._ui.validationInformationVisible = !1) }, _destroyUI: function () { this._resetUI(), void 0 !== this._ui && this._ui.$errorsWrapper.remove(), delete this._ui }, _successClass: function () { this._ui.validationInformationVisible = !0, this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass), this._ui.$errorClassHandler.parent().removeClass("FormValidateError").addClass("FormValidateSuccess").removeClass("has-error").addClass("has-success"), this._ui.$errorClassHandler.parent().find(".fa").removeClass("fa-warning").addClass("fa-check").fadeIn("slow") }, _errorClass: function () { this._ui.validationInformationVisible = !0, this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass), this._ui.$errorClassHandler.parent().removeClass("FormValidateSuccess").addClass("FormValidateError").addClass("has-error").removeClass("has-success"), this._ui.$errorClassHandler.parent().find(".fa").removeClass("fa-check").addClass("fa-warning").fadeIn("slow"), e(".FormValidateError .tooltips").tooltip("show") }, _resetClass: function () { this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass) } }; var f = function (t, i, r) { this.__class__ = "ParsleyForm", this.$element = e(t), this.domOptions = i, this.options = r, this.parent = window.Parsley, this.fields = [], this.validationResult = null }, m = { pending: null, resolved: !0, rejected: !1 }; f.prototype = { onSubmitValidate: function (e) { var t = this; if (!0 !== e.parsley) { var i = this._$submitSource || this.$element.find('input[type="submit"], button[type="submit"]').first(); if (this._$submitSource = null, this.$element.find(".parsley-synthetic-submit-button").prop("disabled", !0), !i.is("[formnovalidate]")) { var r = this.whenValidate({ event: e }); "resolved" === r.state() && !1 !== this._trigger("submit") || (e.stopImmediatePropagation(), e.preventDefault(), "pending" === r.state() && r.done(function () { t._submit(i) })) } } }, onSubmitButton: function (t) { this._$submitSource = e(t.currentTarget) }, _submit: function (t) { if (!1 !== this._trigger("submit")) { if (t) { var i = this.$element.find(".parsley-synthetic-submit-button").prop("disabled", !1); 0 === i.length && (i = e('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element)), i.attr({ name: t.attr("name"), value: t.attr("value") }) } this.$element.trigger(e.extend(e.Event("submit"), { parsley: !0 })) } }, validate: function (t) { if (arguments.length >= 1 && !e.isPlainObject(t)) { s.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated."); var i = _slice.call(arguments); t = { group: i[0], force: i[1], event: i[2] } } return m[this.whenValidate(t).state()] }, whenValidate: function () { var t, i = this, r = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0], n = r.group, a = r.force, o = r.event; this.submitEvent = o, o && (this.submitEvent = e.extend({}, o, { preventDefault: function () { s.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`"), i.validationResult = !1 } })), this.validationResult = !0, this._trigger("validate"), this._refreshFields(); var l = this._withoutReactualizingFormOptions(function () { return e.map(i.fields, function (e) { return e.whenValidate({ force: a, group: n }) }) }); return (t = s.all(l).done(function () { i._trigger("success") }).fail(function () { i.validationResult = !1, i.focus(), i._trigger("error") }).always(function () { i._trigger("validated") })).pipe.apply(t, _toConsumableArray(this._pipeAccordingToValidationResult())) }, isValid: function (t) { if (arguments.length >= 1 && !e.isPlainObject(t)) { s.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated."); var i = _slice.call(arguments); t = { group: i[0], force: i[1] } } return m[this.whenValid(t).state()] }, whenValid: function () { var t = this, i = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0], r = i.group, n = i.force; this._refreshFields(); var a = this._withoutReactualizingFormOptions(function () { return e.map(t.fields, function (e) { return e.whenValid({ group: r, force: n }) }) }); return s.all(a) }, _refreshFields: function () { return this.actualizeOptions()._bindFields() }, _bindFields: function () { var t = this, i = this.fields; return this.fields = [], this.fieldsMappedById = {}, this._withoutReactualizingFormOptions(function () { t.$element.find(t.options.inputs).not(t.options.excluded).each(function (e, i) { var r = new window.Parsley.Factory(i, {}, t); "ParsleyField" !== r.__class__ && "ParsleyFieldMultiple" !== r.__class__ || !0 === r.options.excluded || void 0 === t.fieldsMappedById[r.__class__ + "-" + r.__id__] && (t.fieldsMappedById[r.__class__ + "-" + r.__id__] = r, t.fields.push(r)) }), e.each(s.difference(i, t.fields), function (e, t) { t._trigger("reset") }) }), this }, _withoutReactualizingFormOptions: function (e) { var t = this.actualizeOptions; this.actualizeOptions = function () { return this }; var i = e(); return this.actualizeOptions = t, i }, _trigger: function (e) { return this.trigger("form:" + e) } }; var v = function (t, i, r, s, n) { if (!/ParsleyField/.test(t.__class__)) throw new Error("ParsleyField or ParsleyFieldMultiple instance expected"); var a = window.Parsley._validatorRegistry.validators[i], o = new u(a); e.extend(this, { validator: o, name: i, requirements: r, priority: s || t.options[i + "Priority"] || o.priority, isDomConstraint: !0 === n }), this._parseRequirements(t.options) }; v.prototype = { validate: function (e, t) { var i; return (i = this.validator).validate.apply(i, [e].concat(_toConsumableArray(this.requirementList), [t])) }, _parseRequirements: function (e) { var t = this; this.requirementList = this.validator.parseRequirements(this.requirements, function (i) { return e[t.name + (r = i, r[0].toUpperCase() + r.slice(1))]; var r }) } }; var g = function (t, i, r, s) { this.__class__ = "ParsleyField", this.$element = e(t), void 0 !== s && (this.parent = s), this.options = r, this.domOptions = i, this.constraints = [], this.constraintsByName = {}, this.validationResult = !0, this._bindConstraints() }, y = { pending: null, resolved: !0, rejected: !1 }; g.prototype = { validate: function (t) { arguments.length >= 1 && !e.isPlainObject(t) && (s.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated."), t = { options: t }); var i = this.whenValidate(t); if (!i) return !0; switch (i.state()) { case "pending": return null; case "resolved": return !0; case "rejected": return this.validationResult } }, whenValidate: function () { var e, t = this, i = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0], r = i.force, s = i.group; if (this.refreshConstraints(), !s || this._isInGroup(s)) return this.value = this.getValue(), this._trigger("validate"), (e = this.whenValid({ force: r, value: this.value, _refreshed: !0 }).always(function () { t._reflowUI() }).done(function () { t._trigger("success") }).fail(function () { t._trigger("error") }).always(function () { t._trigger("validated") })).pipe.apply(e, _toConsumableArray(this._pipeAccordingToValidationResult())) }, hasConstraints: function () { return 0 !== this.constraints.length }, needsValidation: function (e) { return void 0 === e && (e = this.getValue()), !(!e.length && !this._isRequired() && void 0 === this.options.validateIfEmpty) }, _isInGroup: function (t) { return e.isArray(this.options.group) ? -1 !== e.inArray(t, this.options.group) : this.options.group === t }, isValid: function (t) { if (arguments.length >= 1 && !e.isPlainObject(t)) { s.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated."); var i = _slice.call(arguments); t = { force: i[0], value: i[1] } } var r = this.whenValid(t); return !r || y[r.state()] }, whenValid: function () { var t = this, i = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0], r = i.force, n = void 0 !== r && r, a = i.value, o = i.group; if (i._refreshed || this.refreshConstraints(), !o || this._isInGroup(o)) { if (this.validationResult = !0, !this.hasConstraints()) return e.when(); if (void 0 !== a && null !== a || (a = this.getValue()), !this.needsValidation(a) && !0 !== n) return e.when(); var l = this._getGroupedConstraints(), u = []; return e.each(l, function (i, r) { var n = s.all(e.map(r, function (e) { return t._validateConstraint(a, e) })); if (u.push(n), "rejected" === n.state()) return !1 }), s.all(u) } }, _validateConstraint: function (t, i) { var r = this, n = i.validate(t, this); return !1 === n && (n = e.Deferred().reject()), s.all([n]).fail(function (e) { r.validationResult instanceof Array || (r.validationResult = []), r.validationResult.push({ assert: i, errorMessage: "string" == typeof e && e }) }) }, getValue: function () { var e; return void 0 === (e = "function" == typeof this.options.value ? this.options.value(this) : void 0 !== this.options.value ? this.options.value : this.$element.val()) || null === e ? "" : this._handleWhitespace(e) }, refreshConstraints: function () { return this.actualizeOptions()._bindConstraints() }, addConstraint: function (e, t, i, r) { if (window.Parsley._validatorRegistry.validators[e]) { var s = new v(this, e, t, i, r); "undefined" !== this.constraintsByName[s.name] && this.removeConstraint(s.name), this.constraints.push(s), this.constraintsByName[s.name] = s } return this }, removeConstraint: function (e) { for (var t = 0; t < this.constraints.length; t++) if (e === this.constraints[t].name) { this.constraints.splice(t, 1); break } return delete this.constraintsByName[e], this }, updateConstraint: function (e, t, i) { return this.removeConstraint(e).addConstraint(e, t, i) }, _bindConstraints: function () { for (var e = [], t = {}, i = 0; i < this.constraints.length; i++) !1 === this.constraints[i].isDomConstraint && (e.push(this.constraints[i]), t[this.constraints[i].name] = this.constraints[i]); this.constraints = e, this.constraintsByName = t; for (var r in this.options) this.addConstraint(r, this.options[r], void 0, !0); return this._bindHtml5Constraints() }, _bindHtml5Constraints: function () { (this.$element.hasClass("required") || this.$element.attr("required")) && this.addConstraint("required", !0, void 0, !0), "string" == typeof this.$element.attr("pattern") && this.addConstraint("pattern", this.$element.attr("pattern"), void 0, !0), void 0 !== this.$element.attr("min") && void 0 !== this.$element.attr("max") ? this.addConstraint("range", [this.$element.attr("min"), this.$element.attr("max")], void 0, !0) : void 0 !== this.$element.attr("min") ? this.addConstraint("min", this.$element.attr("min"), void 0, !0) : void 0 !== this.$element.attr("max") && this.addConstraint("max", this.$element.attr("max"), void 0, !0), void 0 !== this.$element.attr("minlength") && void 0 !== this.$element.attr("maxlength") ? this.addConstraint("length", [this.$element.attr("minlength"), this.$element.attr("maxlength")], void 0, !0) : void 0 !== this.$element.attr("minlength") ? this.addConstraint("minlength", this.$element.attr("minlength"), void 0, !0) : void 0 !== this.$element.attr("maxlength") && this.addConstraint("maxlength", this.$element.attr("maxlength"), void 0, !0); var e = this.$element.attr("type"); return void 0 === e ? this : "number" === e ? this.addConstraint("type", ["number", { step: this.$element.attr("step"), base: this.$element.attr("min") || this.$element.attr("value") }], void 0, !0) : /^(email|url|range)$/i.test(e) ? this.addConstraint("type", e, void 0, !0) : this }, _isRequired: function () { return void 0 !== this.constraintsByName.required && !1 !== this.constraintsByName.required.requirements }, _trigger: function (e) { return this.trigger("field:" + e) }, _handleWhitespace: function (e) { return !0 === this.options.trimValue && s.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"'), "squish" === this.options.whitespace && (e = e.replace(/\s{2,}/g, " ")), "trim" !== this.options.whitespace && "squish" !== this.options.whitespace && !0 !== this.options.trimValue || (e = s.trimString(e)), e }, _getGroupedConstraints: function () { if (!1 === this.options.priorityEnabled) return [this.constraints]; for (var e = [], t = {}, i = 0; i < this.constraints.length; i++) { var r = this.constraints[i].priority; t[r] || e.push(t[r] = []), t[r].push(this.constraints[i]) } return e.sort(function (e, t) { return t[0].priority - e[0].priority }), e } }; var _ = g, w = function () { this.__class__ = "ParsleyFieldMultiple" }; w.prototype = { addElement: function (e) { return this.$elements.push(e), this }, refreshConstraints: function () { var t; if (this.constraints = [], this.$element.is("select")) return this.actualizeOptions()._bindConstraints(), this; for (var i = 0; i < this.$elements.length; i++) if (e("html").has(this.$elements[i]).length) { t = this.$elements[i].data("ParsleyFieldMultiple").refreshConstraints().constraints; for (var r = 0; r < t.length; r++) this.addConstraint(t[r].name, t[r].requirements, t[r].priority, t[r].isDomConstraint) } else this.$elements.splice(i, 1); return this }, getValue: function () { if ("function" == typeof this.options.value) return this.options.value(this); if (void 0 !== this.options.value) return this.options.value; if (this.$element.is("input[type=radio]")) return this._findRelated().filter(":checked").val() || ""; if (this.$element.is("input[type=checkbox]")) { var t = []; return this._findRelated().filter(":checked").each(function () { t.push(e(this).val()) }), t } return this.$element.is("select") && null === this.$element.val() ? [] : this.$element.val() }, _init: function () { return this.$elements = [this.$element], this } }; var b = function (t, i, r) { this.$element = e(t); var s = this.$element.data("Parsley"); if (s) return void 0 !== r && s.parent === window.Parsley && (s.parent = r, s._resetOptions(s.options)), "object" == typeof i && e.extend(s.options, i), s; if (!this.$element.length) throw new Error("You must bind Parsley on an existing element."); if (void 0 !== r && "ParsleyForm" !== r.__class__) throw new Error("Parent instance must be a ParsleyForm instance"); return this.parent = r || window.Parsley, this.init(i) }; b.prototype = { init: function (e) { return this.__class__ = "Parsley", this.__version__ = "2.4.3", this.__id__ = s.generateID(), this._resetOptions(e), this.$element.is("form") || s.checkAttr(this.$element, this.options.namespace, "validate") && !this.$element.is(this.options.inputs) ? this.bind("parsleyForm") : this.isMultiple() ? this.handleMultiple() : this.bind("parsleyField") }, isMultiple: function () { return this.$element.is("input[type=radio], input[type=checkbox]") || this.$element.is("select") && void 0 !== this.$element.attr("multiple") }, handleMultiple: function () { var t, i, r = this; if (this.options.multiple || (void 0 !== this.$element.attr("name") && this.$element.attr("name").length ? this.options.multiple = t = this.$element.attr("name") : void 0 !== this.$element.attr("id") && this.$element.attr("id").length && (this.options.multiple = this.$element.attr("id"))), this.$element.is("select") && void 0 !== this.$element.attr("multiple")) return this.options.multiple = this.options.multiple || this.__id__, this.bind("parsleyFieldMultiple"); if (!this.options.multiple) return s.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.", this.$element), this; this.options.multiple = this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g, ""), void 0 !== t && e('input[name="' + t + '"]').each(function (t, i) { e(i).is("input[type=radio], input[type=checkbox]") && e(i).attr(r.options.namespace + "multiple", r.options.multiple) }); for (var n = this._findRelated(), a = 0; a < n.length; a++) if (void 0 !== (i = e(n.get(a)).data("Parsley"))) { this.$element.data("ParsleyFieldMultiple") || i.addElement(this.$element); break } return this.bind("parsleyField", !0), i || this.bind("parsleyFieldMultiple") }, bind: function (t, i) { var r; switch (t) { case "parsleyForm": r = e.extend(new f(this.$element, this.domOptions, this.options), new a, window.ParsleyExtend)._bindFields(); break; case "parsleyField": r = e.extend(new _(this.$element, this.domOptions, this.options, this.parent), new a, window.ParsleyExtend); break; case "parsleyFieldMultiple": r = e.extend(new _(this.$element, this.domOptions, this.options, this.parent), new w, new a, window.ParsleyExtend)._init(); break; default: throw new Error(t + "is not a supported Parsley type") } return this.options.multiple && s.setAttr(this.$element, this.options.namespace, "multiple", this.options.multiple), void 0 !== i ? (this.$element.data("ParsleyFieldMultiple", r), r) : (this.$element.data("Parsley", r), r._actualizeTriggers(), r._trigger("init"), r) } }; var C = e.fn.jquery.split("."); if (parseInt(C[0]) <= 1 && parseInt(C[1]) < 8) throw "The loaded version of jQuery is too old. Please upgrade to 1.8.x or better."; C.forEach || s.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim"); var F = e.extend(new a, { $element: e(document), actualizeOptions: null, _resetOptions: null, Factory: b, version: "2.4.3" }); e.extend(_.prototype, c.Field, a.prototype), e.extend(f.prototype, c.Form, a.prototype), e.extend(b.prototype, a.prototype), e.fn.parsley = e.fn.psly = function (t) { if (this.length > 1) { var i = []; return this.each(function () { i.push(e(this).parsley(t)) }), i } if (e(this).length) return new b(this, t); s.warn("You must bind Parsley on an existing element.") }, void 0 === window.ParsleyExtend && (window.ParsleyExtend = {}), F.options = e.extend(s.objectCreate(n), window.ParsleyConfig), window.ParsleyConfig = F.options, window.Parsley = window.psly = F, window.ParsleyUtils = s; var $ = window.Parsley._validatorRegistry = new d(window.ParsleyConfig.validators, window.ParsleyConfig.i18n); window.ParsleyValidator = {}, e.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator".split(" "), function (t, i) { window.Parsley[i] = e.proxy($, i), window.ParsleyValidator[i] = function () { var e; return s.warnOnce("Accessing the method '" + i + "' through ParsleyValidator is deprecated. Simply call 'window.Parsley." + i + "(...)'"), (e = window.Parsley)[i].apply(e, arguments) } }), window.Parsley.UI = c, window.ParsleyUI = { removeError: function (e, t, i) { var r = !0 !== i; return s.warnOnce("Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method."), e.removeError(t, { updateClass: r }) }, getErrorsMessages: function (e) { return s.warnOnce("Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly."), e.getErrorsMessages() } }, e.each("addError updateError".split(" "), function (e, t) { window.ParsleyUI[t] = function (e, i, r, n, a) { var o = !0 !== a; return s.warnOnce("Accessing ParsleyUI is deprecated. Call '" + t + "' on the instance directly. Please comment in issue 1073 as to your need to call this method."), e[t](i, { message: r, assert: n, updateClass: o }) } }), !1 !== window.ParsleyConfig.autoBind && e(function () { e("[data-parsley-validate]").length && e("[data-parsley-validate]").parsley() }); var E = e({}), x = function () { s.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley") }; function V(e, t) { return e.parsleyAdaptedCallback || (e.parsleyAdaptedCallback = function () { var i = Array.prototype.slice.call(arguments, 0); i.unshift(this), e.apply(t || E, i) }), e.parsleyAdaptedCallback } var P = "parsley:"; function O(e) { return 0 === e.lastIndexOf(P, 0) ? e.substr(P.length) : e } return e.listen = function (e, t) { var i; if (x(), "object" == typeof arguments[1] && "function" == typeof arguments[2] && (i = arguments[1], t = arguments[2]), "function" != typeof t) throw new Error("Wrong parameters"); window.Parsley.on(O(e), V(t, i)) }, e.listenTo = function (e, t, i) { if (x(), !(e instanceof _ || e instanceof f)) throw new Error("Must give Parsley instance"); if ("string" != typeof t || "function" != typeof i) throw new Error("Wrong parameters"); e.on(O(t), V(i)) }, e.unsubscribe = function (e, t) { if (x(), "string" != typeof e || "function" != typeof t) throw new Error("Wrong arguments"); window.Parsley.off(O(e), t.parsleyAdaptedCallback) }, e.unsubscribeTo = function (e, t) { if (x(), !(e instanceof _ || e instanceof f)) throw new Error("Must give Parsley instance"); e.off(O(t)) }, e.unsubscribeAll = function (t) { x(), window.Parsley.off(O(t)), e("form,input,textarea,select").each(function () { var i = e(this).data("Parsley"); i && i.off(O(t)) }) }, e.emit = function (e, t) { var i; x(); var r = t instanceof _ || t instanceof f, s = Array.prototype.slice.call(arguments, r ? 2 : 1); s.unshift(O(e)), r || (t = window.Parsley), (i = t).trigger.apply(i, _toConsumableArray(s)) }, e.extend(!0, F, { asyncValidators: { default: { fn: function (e) { return e.status >= 200 && e.status < 300 }, url: !1 }, reverse: { fn: function (e) { return e.status < 200 || e.status >= 300 }, url: !1 } }, addAsyncValidator: function (e, t, i, r) { return F.asyncValidators[e] = { fn: t, url: i || !1, options: r || {} }, this } }), F.addValidator("remote", { requirementType: { "": "string", validator: "string", reverse: "boolean", options: "object" }, validateString: function (t, i, r, s) { var n, a, o = {}, l = r.validator || (!0 === r.reverse ? "reverse" : "default"); if (void 0 === F.asyncValidators[l]) throw new Error("Calling an undefined async validator: `" + l + "`"); (i = F.asyncValidators[l].url || i).indexOf("{value}") > -1 ? i = i.replace("{value}", encodeURIComponent(t)) : o[s.$element.attr("name") || s.$element.attr("id")] = t; var u = e.extend(!0, r.options || {}, F.asyncValidators[l].options); n = e.extend(!0, {}, { url: i, data: o, type: "GET" }, u), s.trigger("field:ajaxoptions", s, n), a = e.param(n), void 0 === F._remoteCache && (F._remoteCache = {}); var d = F._remoteCache[a] = F._remoteCache[a] || e.ajax(n), h = function () { var t = F.asyncValidators[l].fn.call(s, d, i, r); return t || (t = e.Deferred().reject()), e.when(t) }; return d.then(h, h) }, priority: -1 }), F.on("form:submit", function () { F._remoteCache = {} }), window.ParsleyExtend.addAsyncValidator = function () { return ParsleyUtils.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`"), F.addAsyncValidator.apply(F, arguments) }, F.addMessages("en", { defaultMessage: "This value seems to be invalid.", type: { email: "This value should be a valid email.", url: "This value should be a valid url.", number: "This value should be a valid number.", integer: "This value should be a valid integer.", digits: "This value should be digits.", alphanum: "This value should be alphanumeric." }, notblank: "This value should not be blank.", required: "This value is required.", pattern: "This value seems to be invalid.", min: "This value should be greater than or equal to %s.", max: "This value should be lower than or equal to %s.", range: "This value should be between %s and %s.", minlength: "This value is too short. It should have %s characters or more.", maxlength: "This value is too long. It should have %s characters or fewer.", length: "This value length is invalid. It should be between %s and %s characters long.", mincheck: "You must select at least %s choices.", maxcheck: "You must select %s choices or fewer.", check: "You must select between %s and %s choices.", equalto: "This value should be the same." }), F.setLocale("en"), (new function () { var t = this, i = window || global; e.extend(this, { isNativeEvent: function (e) { return e.originalEvent && !1 !== e.originalEvent.isTrusted }, fakeInputEvent: function (i) { t.isNativeEvent(i) && e(i.target).trigger("input") }, misbehaves: function (i) { t.isNativeEvent(i) && (t.behavesOk(i), e(document).on("change.inputevent", i.data.selector, t.fakeInputEvent), t.fakeInputEvent(i)) }, behavesOk: function (i) { t.isNativeEvent(i) && e(document).off("input.inputevent", i.data.selector, t.behavesOk).off("change.inputevent", i.data.selector, t.misbehaves) }, install: function () { if (!i.inputEventPatched) { i.inputEventPatched = "0.0.3"; for (var r = ["select", 'input[type="checkbox"]', 'input[type="radio"]', 'input[type="file"]'], s = 0; s < r.length; s++) { var n = r[s]; e(document).on("input.inputevent", n, { selector: n }, t.behavesOk).on("change.inputevent", n, { selector: n }, t.misbehaves) } } }, uninstall: function () { delete i.inputEventPatched, e(document).off(".inputevent") } }) }).install(), F });